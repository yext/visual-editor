/** THIS FILE IS AUTOGENERATED AND SHOULD NOT BE EDITED */
import "@yext/visual-editor/style.css";
import {
  Template,
  GetPath,
  TemplateProps,
  TemplateRenderProps,
  GetHeadConfig,
  HeadConfig,
  TagType,
} from "@yext/pages";
import { Render } from "@measured/puck";
import { locatorConfig } from "../ve.config";
import {
  applyTheme,
  VisualEditorProvider,
  normalizeSlug,
  getPageMetadata,
  applyAnalytics,
  applyHeaderScript,
  createSearchAnalyticsConfig,
  createSearchHeadlessConfig,
} from "@yext/visual-editor";
import {
  CloudChoice,
  CloudRegion,
  Environment,
  provideHeadless,
  SearchHeadlessProvider,
} from "@yext/search-headless-react";
import { themeConfig } from "../../theme.config";
import { SchemaWrapper } from "@yext/pages-components";

const EXPERIENCE_VERSION = "PRODUCTION";

export const getHeadConfig: GetHeadConfig<TemplateRenderProps> = ({
  document,
}): HeadConfig => {
  const { title, description } = getPageMetadata(document);
  const faviconUrl = document?._site?.favicon?.url;

  return {
    title: title,
    charset: "UTF-8",
    viewport: "width=device-width, initial-scale=1",
    tags: [
      {
        type: "link",
        attributes: {
          rel: "icon",
          type: "image/x-icon",
        },
      },
      ...(description
        ? [
            {
              type: "meta" as TagType,
              attributes: {
                name: "description",
                content: description,
              },
            },
          ]
        : []),
      ...(faviconUrl
        ? [
            {
              type: "link" as TagType,
              attributes: {
                rel: "icon",
                type: "image/x-icon",
                href: faviconUrl,
              },
            },
          ]
        : []),
    ],
    other: [
      applyAnalytics(document),
      applyHeaderScript(document),
      applyTheme(document, themeConfig),
      SchemaWrapper(document._schema),
    ].join("\n"),
  };
};

export const getPath: GetPath<TemplateProps> = ({ document }) => {
  if (document.slug) {
    return document.slug;
  }

  const localePath = document.locale !== "en" ? `${document.locale}/` : "";
  const path = `${localePath}${document.id}`;

  return normalizeSlug(path);
};

const Locator: Template<TemplateRenderProps> = (props) => {
  const { document } = props;

  const searchHeadlessConfig = createSearchHeadlessConfig(document);
  const searchAnalyticsConfig = createSearchAnalyticsConfig(document);
  if (
    searchHeadlessConfig === undefined ||
    searchAnalyticsConfig === undefined
  ) {
    return <></>;
  }
  const searcher = provideHeadless(searchHeadlessConfig);

  // Uncomment this to use the config object directly while we're waiting for other work to be done
  // const config = {
  //   apiKey: "",
  //   experienceKey: "jacob-test",
  //   locale: "en",
  //   experienceVersion: EXPERIENCE_VERSION,
  //   verticalKey: "locations",
  //   cloudRegion: CloudRegion.US,
  //   cloudChoice: CloudChoice.GLOBAL_MULTI,
  //   environment: Environment.PROD,
  // };
  // const searchAnalyticsConfig = {
  //   businessId: 70452,
  //   experienceKey: "jacob-test",
  //   experienceVersion: EXPERIENCE_VERSION,
  //   region: 'US',
  //   env: 'PRODUCTION',
  // }
  // const searcher = provideHeadless(config);

  return (
    <SearchHeadlessProvider searcher={searcher}>
      <AnalyticsProvider {...searchAnalyticsConfig}>
        <VisualEditorProvider templateProps={props}>
          <Render
            config={locatorConfig} // TODO (kgerner): update ve.config in starter repo
            data={JSON.parse(document.__.layout)}
          />
        </VisualEditorProvider>
      </AnalyticsProvider>
    </SearchHeadlessProvider>
  );
};

export default Locator;
